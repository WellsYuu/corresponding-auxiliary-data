左边是高位 右边是低位
00000000 00000000 00000000 00001011 = 11

value & 0xFF000000

	00000000 00000000 00000000 00001011
&	11111111 00000000 00000000 00000000
=   00000000 00000000 00000000 00000000 = 0


JAVA:
[-84, -19, 0, 5, 115, 114, 0, 46, 99, 111, 109, 46, 116, 117, 108, 105, 110, 103, 46, 110, 101, 116, 116, 121, 46, 100, 97, 121, 51,
 46, 106, 97, 118, 97, 46, 115, 101, 114, 105, 97, 108, 46, 83, 117, 98, 115, 99, 114, 105, 98, 101, 82, 101, 113, 0, 0, 0, 0, 0, 0,
 0, 1, 2, 0, 4, 73, 0, 8, 115, 117, 98, 82, 101, 113, 73, 68, 76, 0, 11, 97, 100, 100, 114, 101, 115, 115, 76, 105, 115, 116, 116, 0,
 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 76, 0, 11, 112, 114, 111, 100, 117, 99, 116, 78, 97, 
 109, 101, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 76, 0, 8, 117, 115, 101, 114,
 78, 97, 109, 101, 113, 0, 126, 0, 2, 120, 112, 0, 0, 0, 1, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 
 114, 97, 121, 76, 105, 115, 116, 120, -127, -46, 29, -103, -57, 97, -99, 3, 0, 1, 73, 0, 4, 115, 105, 122, 101, 120, 112, 0, 0, 0,
 2, 119, 4, 0, 0, 0, 2, 116, 0, 6, -23, -107, -65, -26, -78, -103, 116, 0, 6, -26, -73, -79, -27, -100, -77, 120, 116, 0, 5, 110, 
 101, 116, 116, 121, 116, 0, 3, 97, 98, 99]

Protobuf:
[8, 1, 18, 3, 97, 98, 99, 26, 5, 110, 101, 116, 116, 121, 34, 6, -23, -107, -65, -26, -78, -103, 34, 6, -26, -73, -79, -27, -100, -77]


码流
编解码性能


int 内存中： 4个字节 32位
protobuf :   1~5个字节

-127 ~128  16  2^16

11  占一个字节就ok了 


0x7F 转二进制为 ： 01111111 
~0x7F : 10000000

	value
&	10000000

&之后的最终结果只有两种：10000000（128） ，00000000（0）


value & 0x7F

	value
&	01111111
=   0???????
也就意味着获取1~7位的数据


0x80 = 10000000

	0???????
|	10000000
=	1???????
也就意味着：可以确定获取第8位为1；  protobuf中1 ~7位表示数据位，第8位表示符号号

long 1~9个字节

1个字节 只能写7位数据 另外还有1位数据写符号（1表示后边还有数据，0表示后边没有数据了）

int 32位  5个字节



编解码源码分析，粘包分包现象，
























