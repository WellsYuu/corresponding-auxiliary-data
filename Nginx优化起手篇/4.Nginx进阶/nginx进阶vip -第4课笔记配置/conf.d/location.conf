#location指令优先级验证：
#	=精准匹配，最优，匹配就直接返回
#	^~,空 为一般匹配，收集所有匹配，取最长匹配执行（此时不返回，还会执行下面的正则匹配）
#	~,~* 为正则匹配，按顺序依次匹配，命中即返回（可能会覆盖普通匹配）

server {

listen       80;
server_name  location.enjoy.com;

#精准匹配测试
#第1，2条虽然匹配，但第三条是精准匹配，出第三条结果
#测试路径/equal/a/b/c
location ~ /equal/* {#被命中，但被下面的推断：location = /equal/a/b/c
	return 400;
}
location /equal/a/b {#被命中，但被下面的推断：location = /equal/a/b/c
        return 401;
}
location = /equal/a/b/c {#被命中，直接执行，不等待
        return 402;
}

#普通匹配测试
#第1，2条虽然匹配，第三条匹配更长，出第三条结果
#测试路径/match/a/b/c
location /match/a {#被命中，但不是最长
	return 412;
}
location /match/a/b {#被命中，但不是最长
        return 413;
}
location /match/a/b/c {#被命中，且最长
        return 414;
}
location /match/a/b/c/d {#不命中
        return 415;
}

#正则匹配覆盖普通匹配测试
#会覆盖普通匹配，不会覆盖=和^~
location =/re/a.js {#访问/re/a.js，不会被后面的正则覆盖
	echo 'match =';
}
location ^~ /re/a/b {#访问/re/a/b开头的路径，不会被后面的正则覆盖
	echo 'math ^~/re/a/b*';
}
location /re/a.htm {#访问/re/a.htm，会被后面的正则覆盖
         echo 'match /re/a.htm';
}
location ~ /re/(.*)\.(htm|js|css)$ {#覆盖/re/a.htm路径
	echo "cover /re/$1.$2";
}

#正则匹配成功一条后，便不再走其它正则
#最长正则匹配是第三个，但匹配第一个后便不往下走
#测试路径/rex/a/b/c.htm
location ~ /rex/.*\.(htm|js|css)$ {#覆盖/re/a.htm路径
        echo "match first";
}
location ~ /rex/a/(.*)\.(htm|js|css)$ {#覆盖/re/a.htm路径
        echo "match second";
}
location ~ /rex/a/b/(.*)\.(htm|js|css)$ {#覆盖/re/a.htm路径
        echo "match third";
}

#index处理
#location.enjoy.com/static方式无法访问
#location.enjoy.com/static/方式可访问到c页面
location /static/ {
	root html;
	index c.html;
}

}
