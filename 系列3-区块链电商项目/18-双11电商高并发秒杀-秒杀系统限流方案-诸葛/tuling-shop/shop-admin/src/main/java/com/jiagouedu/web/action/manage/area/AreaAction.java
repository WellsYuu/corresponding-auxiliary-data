package com.jiagouedu.web.action.manage.area;import com.jiagouedu.core.Services;import com.jiagouedu.core.dao.page.PagerModel;import com.jiagouedu.core.front.SystemManager;import com.jiagouedu.core.oscache.FrontCache;import com.jiagouedu.core.util.CreateAreaUtil;import com.jiagouedu.services.manage.area.AreaService;import com.jiagouedu.services.manage.area.bean.Area;import com.jiagouedu.web.action.BaseController;import net.sf.json.JSONArray;import org.apache.commons.lang.StringUtils;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import java.io.IOException;import java.util.Collection;import java.util.Map;/** * 区域 * @author wukong 图灵学院 QQ:245553999 * @author wukong 图灵学院 QQ:245553999 * */@Controller@RequestMapping("/manage/area/")public class AreaAction extends BaseController<Area> {	private static final long serialVersionUID = 1L;	private static final org.slf4j.Logger logger = LoggerFactory.getLogger(AreaAction.class);    private final String page_toAddOrUpdate = "/manage/area/addOrUpdate";    @Autowired	private AreaService areaService;    @Autowired	private FrontCache frontCache;		public AreaService getAreaService() {		return areaService;	}    @Override    public Services<Area> getService() {        return areaService;    }    @Override	protected void selectListAfter(PagerModel pager) {		pager.setPagerUrl("selectList");	}	public void setAreaService(AreaService areaService) {		this.areaService = areaService;	}    @Override	public void insertAfter(Area e) {		e.clear();	}		/**	 * 获得省市区的树结构数据	 * @return	 * @throws IOException 	 */    @RequestMapping("getAreaTree")    @ResponseBody	public String getAreaTree() throws IOException{//		List<Area> areaList = areaService.getAreaTree("0");		Collection<com.jiagouedu.services.front.area.bean.Area> areaList = SystemManager.getInstance().getAreaMap().values();				JSONArray json = JSONArray.fromObject(areaList);		String jsonStr = json.toString();//		logger.error("jsonStr="+jsonStr);		return jsonStr;	}		/**	 * 转到 添加/修改菜单 页面	 * @return	 * @throws Exception	 */    @RequestMapping("toAddOrUpdate")	public String toAddOrUpdate(Area e, ModelMap model) throws Exception{		e = areaService.selectOne(e);        model.addAttribute("e", e);		return page_toAddOrUpdate;	}		/**	 * 添加主类/修改主类、添加子类	 * @return	 * @throws IOException	 */    @RequestMapping(value = "toAddOrUpdate", method = RequestMethod.POST)    @ResponseBody	public String doAddOrUpdate(HttpServletRequest request) throws IOException{		String id = request.getParameter("id");		String code = request.getParameter("code");		String pcode = request.getParameter("pcode");		String name = request.getParameter("name");				String children_code = request.getParameter("children_code");		String children_pcode = request.getParameter("children_pcode");		String children_name = request.getParameter("children_name");		String children_type = request.getParameter("children_type");				//debug		StringBuilder buff = new StringBuilder();		buff.append("id="+id+";");		buff.append("code="+code+";");		buff.append("pcode="+pcode+";");		buff.append("name="+name+";");		buff.append("children_code="+children_code+";");		buff.append("children_pcode="+children_pcode+";");		buff.append("children_name="+children_name+";");		buff.append("children_type="+children_type+";");		logger.error("doAddOrUpdate.buff="+buff.toString());				if (StringUtils.isBlank(id) || StringUtils.isBlank(code)				|| StringUtils.isBlank(pcode) || StringUtils.isBlank(name)) {			//非法请求			return "-1";		}else{			//修改顶级类别			Area area = new Area();			area.setId(id);			area.setCode(code);			area.setPcode(pcode);			area.setName(name);			areaService.update(area);						if (StringUtils.isBlank(children_code)					|| StringUtils.isBlank(children_pcode)					|| StringUtils.isBlank(children_name)					) {				//忽略			}else{				if(children_type.equals("top")){//添加顶级类					children_code = "0";				}else{//添加子类					children_pcode = code;				}								//添加子类别				area.clear();				area.setCode(children_code);				area.setPcode(children_pcode);				area.setName(children_name);				areaService.insert(area);			}						//成功			return "0";		}	}		/**	 * 对树的删除操作	 * @return	 * @throws Exception	 */    @RequestMapping(value = "delete", method = RequestMethod.POST)    @ResponseBody	public String delete(HttpServletRequest request) throws Exception{		String ids = request.getParameter("ids");		if(StringUtils.isBlank(ids)){			throw new Exception("非法请求！");		}		logger.error("delete.ids="+ids+",deleteParent="+request.getParameter("deleteParent"));		areaService.deletes2(ids,request.getParameter("deleteParent"));				//删除成功返回1		return "1";	}	/**	 * 初始化区域树	 * @return	 */    @RequestMapping(value = "areaTree")	public String areaTree(){		return "/manage/area/areaTree";	}	/**	 * 初始化区域树	 * @return	 */    @RequestMapping(value = "initAreaTree")	public String initAreaTree(){//		cacheManager.initAreaDataToDB();				Map<String, Area> map = CreateAreaUtil.getAreaMap();		if(map.size()==0){			throw new NullPointerException("无数据源！");		}		areaService.initAreaDataToDB(map);        frontCache.loadArea();//		frontCache.readJsonArea();		return "/manage/area/areaTree";	}		/**	 * 加载省市区数据	 *///	private void loadArea(){//		logger.error("loadArea...");//		Area area = new Area();//		area.setPcode("0");//		List<Area> rootData = areaService.selectList(area);//		if(rootData==null){//			return ;//		}////		for(int i=0;i<rootData.size();i++){//			Area item = rootData.get(i);//			getAreaByDigui2(item);//		}////		Map<String, Area> map = new TreeMap<String, Area>();//		for(int i=0;i<rootData.size();i++){//			Area item = rootData.get(i);//			map.put(item.getCode(), item);//		}//		SystemManager.areaMap = map;		//		logger.error("SystemManager.areaMap=="+SystemManager.areaMap);		//		String json = JSON.toJSONString(map);////		logger.error("json="+json);//		try {////			String path = FrontCache.class.getResource("/").getPath();//			logger.error("path = " + path);//			File file = new File(path + "__area.json");////			//写到文件////			File file = new File("__area.txt");////			logger.error("file.exists()="+file.exists());////			if(!file.exists()){////				boolean f = file.createNewFile();////				logger.error("f="+f);////			}//			logger.error("file.getAbsolutePath()="+file.getAbsolutePath());//			FileUtils.writeStringToFile(file, json, "utf-8");//		} catch (IOException e) {//			e.printStackTrace();//		}//	}	//	/**//	 * 递归加载省份下的：城市、区域、以后还会有街道的数据//	 * @param item//	 *///	private void getAreaByDigui2(Area item){//		Area area = new Area();//		area.setPcode(item.getCode());//		List<Area> children = areaService.selectList(area);//		if(children==null){//			return ;//		}////		item.setChildren(children);//////		for(int i=0;i<children.size();i++){//			getAreaByDigui2(children.get(i));//		}//	}}