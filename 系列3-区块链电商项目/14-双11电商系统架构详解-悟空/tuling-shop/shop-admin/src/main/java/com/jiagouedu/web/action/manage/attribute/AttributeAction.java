package com.jiagouedu.web.action.manage.attribute;import com.jiagouedu.core.dao.page.PagerModel;import com.jiagouedu.services.manage.attribute.AttributeService;import com.jiagouedu.services.manage.attribute.bean.Attribute;import com.jiagouedu.web.action.BaseController;import com.jiagouedu.web.util.RequestHolder;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import javax.servlet.http.HttpServletRequest;import java.util.List;/** * 属性action * @author wukong 图灵学院 QQ:245553999 * @author wukong 图灵学院 QQ:245553999 * */@Controller@RequestMapping("/manage/attribute/")public class AttributeAction extends BaseController<Attribute> {	private static final long serialVersionUID = 1L;	private static final Logger logger = LoggerFactory.getLogger(AttributeAction.class);	@Autowired	private AttributeService attributeService;	private static final Object lock = new Object();//添加参数锁，防止多人操作产生的数据异常。	private static final String page_toList = "/manage/attribute/attributeList";	private static final String page_toEdit = "/manage/attribute/attributeEdit";	private static final String page_toAdd = "/manage/attribute/attributeEdit";	private AttributeAction() {		super.page_toList = page_toList;		super.page_toAdd = page_toAdd;		super.page_toEdit = page_toEdit;	}	@Override	public AttributeService getService() {		return attributeService;	}	@Override	protected void selectListAfter(PagerModel pager) {		super.selectListAfter(pager);		Attribute attr = new Attribute();		savePid(attr);		RequestHolder.getRequest().setAttribute("catalogs", systemManager.getCatalogs());		Attribute p = new Attribute();		StringBuilder itemBuff = new StringBuilder();		if(pager.getList()!=null && pager.getList().size()>0){			//根据每一项的ID作为子项的PID去查询子项的数据列表			for(int i=0;i<pager.getList().size();i++){				Attribute item = (Attribute) pager.getList().get(i);				p.setPid(Integer.valueOf(item.getId()));				List<Attribute> list = attributeService.selectList(p);				itemBuff.setLength(0);				for(int j=0;j<list.size();j++){					itemBuff.append(list.get(j).getName());					if(j!=list.size()){						itemBuff.append(",");					}				}				item.setNameBuff(itemBuff.toString());			}		}	}	public void setAttributeService(AttributeService attributeService) {		this.attributeService = attributeService;	}	@Override	public void insertAfter(Attribute e) {		savePid(e);	}		private void savePid(Attribute e){		int pid = e.getPid();//保存目录类别		int catalogID = e.getCatalogID();//保存查询目录ID		e.clear();		e.setPid(pid);		e.setCatalogID(catalogID);	}		/**	 * 保留下pid，因为这个表示属性和参数2个方面	 */	@Override	public String toAdd(Attribute e, ModelMap model) throws Exception {		savePid(e);		model.addAttribute("insertOrUpdateMsg", "");		model.addAttribute("catalogs", systemManager.getCatalogs());		model.addAttribute("e", e);		return page_toAdd;	}		@Override	public String back(Attribute e, ModelMap model) throws Exception {		savePid(e);		return super.back(e, model);	}	@Override	public String selectList(HttpServletRequest request, @ModelAttribute("e") Attribute e) throws Exception {		int pid = e.getPid();		String init = request.getParameter("init");		if("y".equals(init)){			e.clear();		}		e.setPid(pid);				return super.selectList(request, e);	}		/**	 * 对属性和参数的新增操作需要注意一下：同一个类别下面可以有多个属性，同一个属性下只能有一个参数。同一个属性下的所有商品将会共享这一二个参数。	 * 	 * 这个可以参看淘宝的做法，如果查看笔记本，那么该笔记本类别下可以有多个品牌，一个品牌下有多个属性。但是	 * 	 * 淘宝商品结构：	 * 	 * 商品服务分类		--顶级目录	 * 		手机数码		--顶级虚目录	 * 			笔记本	--二级虚目录	 * 				联想、三星、惠普、索尼		--商品属性(或者称之为品牌)分类	 * 					联想属性(品牌)下有：X240/S3/T430/T400		--品牌下的型号分类	 * 					 */	@Override	public String insert(HttpServletRequest request, Attribute e, RedirectAttributes flushAttrs) throws Exception {		try {//			String id = e.getId();			int pid = e.getPid();//			if(StringUtils.isBlank(id)){//				throw new NullPointerException();//			}						logger.error("Attribute.insert.id = " + e.getId()+",pid="+pid);			if(pid==-1){				synchronized (lock) {					//查询指定的类目下是否有多个参数					Attribute ee = new Attribute();					ee.setCatalogID(e.getCatalogID());					ee.setPid(e.getPid());					int count = attributeService.selectCount(ee);					if (count == 0) {						return insert0(e);					}else if(count == 1){						if(StringUtils.isNotBlank(e.getId())){							return insert0(e);						}					}					//已经添加了一个参数，则会抛出RuntimeException异常。					throw new RuntimeException("一个商品类别下只能添加一个参数！");				}			}else if(pid==0){				//忽略				return insert0(e);			}else{				throw new NullPointerException("参数异常。pid="+pid+"，pid不正确。只能为0或-1。");			}		} catch (Exception ex) {			ex.printStackTrace();			throw ex;		}	}		private String insert0(Attribute e) throws Exception{		int id = getService().insert(e);		logger.error("insert0.id="+id);//		getSession().setAttribute("insertOrUpdateMsg", "操作成功！");//		getResponse().sendRedirect(getEditUrl(String.valueOf(id)));//		return "redirect:toEdit2?id="+id;		return "redirect:selectList";	}		private String getEditUrl(String id){		logger.error("getEditUrl.id=" + id);		return "attribute!toEdit2.action?e.id="+id;	}		/**	 * 列表页面点击 编辑商品	 */	@Override	public String toEdit(@ModelAttribute("e") Attribute e, ModelMap model) throws Exception {//		getSession().setAttribute("insertOrUpdateMsg", "");		model.addAttribute("catalogs", systemManager.getCatalogs());		return toEdit0(e, model);	}		/**	 * 添加或编辑商品后程序回转编辑页面	 * @return	 * @throws Exception	 */	@RequestMapping("toEdit2")	public String toEdit2(Attribute e, ModelMap model) throws Exception {//		String id = getRequest().getParameter("id");//		e.setId(id);		return toEdit0(e, model);	}		private String toEdit0(Attribute e, ModelMap model) throws Exception {		if(StringUtils.isBlank(e.getId())){			throw new NullPointerException();		}		logger.error("e.getId() = " + e.getId());		//加载属性/参数对象		e = attributeService.selectById(e.getId());		logger.error("e = " + e);		//加载子属性列表		Attribute ee = new Attribute();		ee.setPid(Integer.valueOf(e.getId()));		e.setAttrList(attributeService.selectList(ee));		model.addAttribute("e", e);		return page_toEdit;	}	//	//列表页面点击 编辑商品//	public String toEdit() throws Exception {//		getSession().setAttribute("insertOrUpdateMsg", "");//		return toEdit0();//	}	//	@Override//	protected void setParamWhenInitQuery() {//		super.setParamWhenInitQuery();//		logger.error("setParamWhenInitQuery catalogID = " + e.getCatalogID());//	}		/**	 * 删除商品属性数据，需要同时删除该属性下的子属性 以及 attributeLink表的关联数据	 *///	public String deletes() throws Exception {//		return super.deletes();//	}	//	@Override//	public String insert() throws Exception {//		if(StringUtils.isBlank(e.getAttrNames0())){//			throw new NullPointerException("添加失败！");//		}//		e.//		return super.insert();//	}}